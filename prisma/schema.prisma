generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// App Models | NextAuth
model EsiToken {
  AccountId     String
  CharacterId   Int      @id
  CharacterName String
  Scopes        String
  TokenType     String
  ExpiresOn     DateTime @db.Timestamptz
  RefreshToken  String
}

// NextAuth Model
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// EVE Online Models
model Alliance {
  AllianceId                 Int                          @id
  CreatorCorporationId       Int
  CreatorId                  Int
  DateFounded                DateTime                     @db.Timestamptz
  ExecutorCorporationId      Int
  FactionId                  Int?
  Name                       String
  Ticker                     String
  AllianceContact            AllianceContact[]
  AllianceContactLabel       AllianceContactLabel[]
  AllianceIcons              AllianceIcons[]
  Character                  Character[]
  Corporation                Corporation[]
  CorporationAlliancehistory CorporationAlliancehistory[]
  SovereigntyMap             SovereigntyMap[]
  SovereigntyStructure       SovereigntyStructure[]
  Race                       Race[]
}

model AllianceContact {
  AllianceId  Int
  Alliance    Alliance @relation(fields: [AllianceId], references: [AllianceId])
  ContactId   Int
  ContactType String?
  LabelIds    Json?
  Standing    Float?

  @@id([AllianceId, ContactId])
}

model AllianceContactLabel {
  AllianceId Int
  Alliance   Alliance @relation(fields: [AllianceId], references: [AllianceId])
  LabelId    BigInt
  LabelName  String

  @@id([AllianceId, LabelId])
}

model AllianceIcons {
  AllianceId Int      @id
  Alliance   Alliance @relation(fields: [AllianceId], references: [AllianceId])
  Px128x128  String?
  Px64x64    String?
}

model Character {
  CharacterId                  Int                            @id
  AllianceId                   Int?
  Alliance                     Alliance?                      @relation(fields: [AllianceId], references: [AllianceId])
  Birthday                     DateTime?                      @db.Timestamptz
  BloodlineId                  Int?
  Bloodline                    Bloodline?                     @relation(fields: [BloodlineId], references: [BloodlineId])
  CorporationId                Int?
  Corporation                  Corporation?                   @relation(fields: [CorporationId], references: [CorporationId])
  Description                  String?
  FactionId                    Int?
  Gender                       String?
  Name                         String?
  RaceId                       Int?
  SecurityStatus               Float?
  Title                        String?
  CharacterAgentResearch       CharacterAgentResearch[]
  CharacterAssets              CharacterAssets[]
  CharacterAttributes          CharacterAttributes[]
  CharacterBlueprints          CharacterBlueprints[]
  CharacterBookmarks           CharacterBookmarks[]
  CharacterBookmarksFolders    CharacterBookmarksFolders[]
  CharacterCalendar            CharacterCalendar[]
  CharacterCalendarAttendees   CharacterCalendarAttendees[]
  CharacterCalendarHeaders     CharacterCalendarHeaders[]
  CharacterClones              CharacterClones[]
  CharacterContact             CharacterContact[]
  CharacterContactLabel        CharacterContactLabel[]
  CharacterContracts           CharacterContracts[]
  CharacterContractsBid        CharacterContractsBid[]
  CharacterContractsItems      CharacterContractsItems[]
  CharacterCorporationHistory  CharacterCorporationHistory[]
  CharacterFatigue             CharacterFatigue[]
  CharacterFittings            CharacterFittings[]
  CharacterFleet               CharacterFleet[]
  CharacterFwStats             CharacterFwStats[]
  CharacterImplants            CharacterImplants[]
  CharacterIndustryJobs        CharacterIndustryJobs[]
  CharacterLocation            CharacterLocation[]
  CharacterLoyaltyPoints       CharacterLoyaltyPoints[]
  CharacterMail                CharacterMail[]
  CharacterMailHeaders         CharacterMailHeaders[]
  CharacterMailLabel           CharacterMailLabel[]
  CharacterMailList            CharacterMailList[]
  CharacterMedals              CharacterMedals[]
  CharacterMining              CharacterMining[]
  CharacterNotification        CharacterNotification[]
  CharacterNotificationContact CharacterNotificationContact[]
  CharacterOnlineHistory       CharacterOnlineHistory[]
  CharacterOpportunity         CharacterOpportunity[]
  CharacterOrder               CharacterOrder[]
  CharacterOrderHistory        CharacterOrderHistory[]
  CharacterPlanet              CharacterPlanet[]
  CharacterPlanetLayout        CharacterPlanetLayout[]
  CharacterPortrait            CharacterPortrait[]
  CharacterRoles               CharacterRoles[]
  CharacterShip                CharacterShip[]
  CharacterSkillqueue          CharacterSkillqueue[]
  CharacterSkills              CharacterSkills[]
  CharacterStandings           CharacterStandings[]
  CharacterTitle               CharacterTitle[]
  CharacterWallet              CharacterWallet[]
  CharacterWalletJournal       CharacterWalletJournal[]
  CharacterWalletTransactions  CharacterWalletTransactions[]
}

model CharacterAgentResearch {
  CharacterId     Int
  Character       Character @relation(fields: [CharacterId], references: [CharacterId])
  AgentId         Int
  PointsPerDay    Float?
  RemainderPoints Float?
  SkillTypeId     Int?
  StartedAt       DateTime? @db.Timestamptz

  @@id([CharacterId, AgentId])
}

model CharacterAssets {
  CharacterId     Int
  Character       Character @relation(fields: [CharacterId], references: [CharacterId])
  IsBlueprintCopy Boolean?
  IsSingleton     Boolean?
  ItemId          BigInt    @id
  LocationFlag    String?
  LocationId      BigInt?
  LocationType    String?
  Quantity        Int?
  TypeId          Int?
}

model CharacterAttributes {
  CharacterId              Int       @id
  Character                Character @relation(fields: [CharacterId], references: [CharacterId])
  AccruedRemapCooldownDate DateTime? @db.Timestamptz
  BonusRemaps              Int?
  Charisma                 Int?
  Intelligence             Int?
  LastRemapDate            DateTime? @db.Timestamptz
  Memory                   Int?
  Perception               Int?
  Willpower                Int?
}

model CharacterBlueprints {
  CharacterId        Int
  Character          Character @relation(fields: [CharacterId], references: [CharacterId])
  ItemId             BigInt    @id
  LocationFlag       String?
  LocationId         BigInt?
  MaterialEfficiency Int?
  Quantity           Int?
  Runs               Int?
  TimeEfficiency     Int?
  TypeId             Int?
}

model CharacterBookmarks {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  BookmarkId  Int       @id
  Coordinates Json?
  Created     DateTime? @db.Timestamptz
  CreatorId   Int?
  FolderId    Int?
  Item        Json?
  Label       String?
  LocationId  Int?
  Notes       String?
}

model CharacterBookmarksFolders {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  FolderId    Int       @id
  Name        String?
}

model CharacterCalendar {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  EventId     Int       @id
  Date        DateTime? @db.Timestamptz
  Duration    Int?
  Importance  Int?
  OwnerId     Int?
  OwnerName   String?
  OwnerType   String?
  Response    String?
  Text        String?
  Title       String?
}

model CharacterCalendarAttendees {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  EventId       Int       @id
  AttendeeId    Int?
  EventResponse String?
}

model CharacterCalendarHeaders {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  EventDate     DateTime? @db.Timestamptz
  EventId       Int
  EventResponse String?
  Importance    Int?
  Title         String?

  @@id([CharacterId, EventId])
}

model CharacterClones {
  CharacterId           Int       @id
  Character             Character @relation(fields: [CharacterId], references: [CharacterId])
  HomeLocation          Json?
  JumpClones            Json?
  LastCloneJumpDate     DateTime? @db.Timestamptz
  LastStationChangeDate DateTime? @db.Timestamptz
}

model CharacterContact {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  ContactId   Int
  ContactType String?
  IsBlocked   Boolean?
  IsWatched   Boolean?
  LabelIds    Json?
  Standing    Float?

  @@id([CharacterId, ContactId])
}

model CharacterContactLabel {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  LabelId     BigInt
  LabelName   String?

  @@id([CharacterId, LabelId])
}

model CharacterContracts {
  CharacterId             Int
  Character               Character                 @relation(fields: [CharacterId], references: [CharacterId])
  AcceptorId              Int?
  AssigneeId              Int?
  Availability            String?
  Buyout                  Decimal?                  @db.Decimal
  Collateral              Decimal?                  @db.Decimal
  ContractId              Int                       @id
  DateAccepted            DateTime?                 @db.Timestamptz
  DateCompleted           DateTime?                 @db.Timestamptz
  DateExpired             DateTime?                 @db.Timestamptz
  DateIssued              DateTime?                 @db.Timestamptz
  DaysToComplete          Int?
  EndLocationId           BigInt?
  ForCorporation          Boolean?
  IssuerCorporationId     Int?
  IssuerId                Int?
  Price                   Decimal?                  @db.Decimal
  Reward                  Decimal?                  @db.Decimal
  StartLocationId         BigInt?
  Status                  String?
  Title                   String?
  Type                    String?
  Volume                  Decimal?                  @db.Decimal
  CharacterContractsBid   CharacterContractsBid[]
  CharacterContractsItems CharacterContractsItems[]
}

model CharacterContractsBid {
  CharacterId Int
  Character   Character          @relation(fields: [CharacterId], references: [CharacterId])
  ContractId  Int                @id
  Contract    CharacterContracts @relation(fields: [ContractId], references: [ContractId])
  Amount      Float?
  BidId       Int?
  BidderId    Int?
  DateBid     DateTime?          @db.Timestamptz
}

model CharacterContractsItems {
  CharacterId Int
  Character   Character          @relation(fields: [CharacterId], references: [CharacterId])
  ContractId  Int
  Contract    CharacterContracts @relation(fields: [ContractId], references: [ContractId])
  IsIncluded  Boolean?
  IsSingleton Boolean?
  Quantity    Int?
  RawQuantity Int?
  RecordId    BigInt
  TypeId      Int?

  @@id([ContractId, RecordId])
}

model CharacterCorporationHistory {
  CharacterId   Int
  Character     Character   @relation(fields: [CharacterId], references: [CharacterId])
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  IsDeleted     Boolean?
  RecordId      Int
  StartDate     DateTime?   @db.Timestamptz

  @@id([CharacterId, RecordId])
}

model CharacterFatigue {
  CharacterId           Int       @id
  Character             Character @relation(fields: [CharacterId], references: [CharacterId])
  JumpFatigueExpireDate DateTime? @db.Timestamptz
  LastJumpDate          DateTime? @db.Timestamptz
  LastUpDateDate        DateTime? @db.Timestamptz
}

model CharacterFittings {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  Description String?
  FittingId   Int       @id
  Items       Json?
  Name        String?
  ShipTypeId  Int?
}

model CharacterFleet {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  FleetId     BigInt    @id
  Role        String?
  SquadId     BigInt?
  WingId      BigInt?
}

model CharacterFwStats {
  CharacterId   Int       @id
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  CurrentRank   Int?
  EnlistedOn    DateTime? @db.Timestamptz
  FactionId     Int?
  HighestRank   Int?
  Kills         Json?
  VictoryPoints Json?
}

model CharacterImplants {
  CharacterId Int       @id
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  Implants    Json?
}

model CharacterIndustryJobs {
  CharacterId          Int
  Character            Character @relation(fields: [CharacterId], references: [CharacterId])
  ActivityId           Int?
  BlueprintId          BigInt?
  BlueprintLocationId  BigInt?
  BlueprintTypeId      Int?
  CompletedCharacterId Int?
  CompletedDate        DateTime? @db.Timestamptz
  Cost                 Decimal?  @db.Decimal
  Duration             Int?
  EndDate              DateTime? @db.Timestamptz
  FacilityId           BigInt?
  InstallerId          Int?
  JoBid                Int       @id
  LicensedRuns         Int?
  OutputLocationId     BigInt?
  PauseDate            DateTime? @db.Timestamptz
  Probability          Float?
  ProductTypeId        Int?
  Runs                 Int?
  StartDate            DateTime? @db.Timestamptz
  StationId            BigInt?
  Status               String?
  SuccessfulRuns       Int?
}

model CharacterLocation {
  CharacterId   Int       @id
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  SolarSystemId Int?
  StationId     Int?
  StructureId   BigInt?
}

model CharacterLoyaltyPoints {
  CharacterId   Int
  Character     Character   @relation(fields: [CharacterId], references: [CharacterId])
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  LoyaltyPoints Int?

  @@id([CharacterId, CorporationId])
}

model CharacterMail {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  MailId      Int       @id
  Body        String?
  From        Int?      @map("From")
  Label       Json?
  Read        Boolean?
  Recipients  Json?
  Subject     String?
  Timestamp   DateTime? @db.Timestamptz
}

model CharacterMailHeaders {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  From        Int?      @map("From")
  IsRead      Boolean?
  Label       Json?
  MailId      Int       @id
  Recipients  Json?
  Subject     String?
  Timestamp   DateTime? @db.Timestamptz
}

model CharacterMailLabel {
  CharacterId      Int       @id
  Character        Character @relation(fields: [CharacterId], references: [CharacterId])
  Label            Json?
  TotalUnreadCount Int?
}

model CharacterMailList {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  MailingListId Int
  Name          String?

  @@id([CharacterId, MailingListId])
}

model CharacterMedals {
  CharacterId   Int
  Character     Character    @relation(fields: [CharacterId], references: [CharacterId])
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  Date          DateTime?    @db.Timestamptz
  Description   String?
  Graphic       Json?
  IssuerId      Int?
  MedalId       Int
  Reason        String?
  Status        String?
  Title         String?

  @@id([CharacterId, MedalId])
}

model CharacterMining {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  Date          DateTime  @db.Timestamptz
  Quantity      BigInt?
  SolarSystemId Int
  TypeId        Int

  @@id([CharacterId, Date, SolarSystemId, TypeId])
}

model CharacterNotification {
  CharacterId    Int
  Character      Character @relation(fields: [CharacterId], references: [CharacterId])
  IsRead         Boolean?
  NotificationId BigInt    @id
  SenderId       Int?
  SenderType     String?
  Text           String?
  Timestamp      DateTime? @db.Timestamptz
  Type           String?
}

model CharacterNotificationContact {
  CharacterId       Int
  Character         Character @relation(fields: [CharacterId], references: [CharacterId])
  Message           String?
  NotificationId    Int       @id
  SendDate          DateTime? @db.Timestamptz
  SenderCharacterId Int?
  StandingLevel     Float?
}

model CharacterOnlineHistory {
  CharacterId Int       @id
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  LastLogin   DateTime? @db.Timestamptz
  LastLogout  DateTime? @db.Timestamptz
  Logins      Int?
  Online      Boolean?
}

model CharacterOpportunity {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  CompletedAt DateTime? @db.Timestamptz
  TaskId      Int

  @@id([CharacterId, TaskId])
}

model CharacterOrder {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  Duration      Int?
  Escrow        Decimal?  @db.Decimal
  IsBuyOrder    Boolean?
  IsCorporation Boolean?
  Issued        DateTime? @db.Timestamptz
  LocationId    BigInt?
  MinVolume     Int?
  OrderId       BigInt    @id
  Price         Decimal?  @db.Decimal
  Range         String?
  RegionId      Int?
  TypeId        Int?
  VolumeRemain  Int?
  VolumeTotal   Int?
}

model CharacterOrderHistory {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  Duration      Int?
  Escrow        Decimal?  @db.Decimal
  IsBuyOrder    Boolean?
  IsCorporation Boolean?
  Issued        DateTime? @db.Timestamptz
  LocationId    BigInt?
  MinVolume     Int?
  OrderId       BigInt    @id
  Price         Decimal?  @db.Decimal
  Range         String?
  RegionId      Int?
  State         String?
  TypeId        Int?
  VolumeRemain  Int?
  VolumeTotal   Int?
}

model CharacterPlanet {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  LastUpDate    DateTime? @db.Timestamptz
  NumPins       Int?
  OwnerId       Int?
  PlanetId      Int
  PlanetType    String?
  SolarSystemId Int?
  UpgradeLevel  Int?

  @@id([CharacterId, PlanetId])
}

model CharacterPlanetLayout {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  PlanetId    Int
  Links       Json?
  Pins        Json?
  Routes      Json?

  @@id([CharacterId, PlanetId])
}

model CharacterPortrait {
  CharacterId Int       @id
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  Px128x128   String?
  Px256x256   String?
  Px512x512   String?
  Px64x64     String?
}

model CharacterRoles {
  CharacterId  Int       @id
  Character    Character @relation(fields: [CharacterId], references: [CharacterId])
  Roles        Json?
  RolesAtBase  Json?
  RolesAtHq    Json?
  RolesAtOther Json?
}

model CharacterShip {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  ShipItemId  BigInt    @id
  ShipName    String?
  ShipTypeId  Int?
}

model CharacterSkillqueue {
  CharacterId     Int
  Character       Character @relation(fields: [CharacterId], references: [CharacterId])
  FinishDate      DateTime? @db.Timestamptz
  FinishedLevel   Int?
  LevelEndSp      Int?
  LevelStartSp    Int?
  QueuePosition   Int?
  SkillId         Int
  StartDate       DateTime? @db.Timestamptz
  TrainingStartSp Int?

  @@id([CharacterId, SkillId])
}

model CharacterSkills {
  CharacterId   Int       @id
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  Skills        Json?
  TotalSp       BigInt?
  UnallocatedSp Int?
}

model CharacterStandings {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  FromId      Int
  FromType    String?
  Standing    Float?

  @@id([CharacterId, FromId])
}

model CharacterTitle {
  CharacterId Int
  Character   Character @relation(fields: [CharacterId], references: [CharacterId])
  Name        String?
  TitleId     Int

  @@id([CharacterId, TitleId])
}

model CharacterWallet {
  CharacterId   Int       @id
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  WalletBalance Decimal?  @db.Decimal
}

model CharacterWalletJournal {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  Amount        Decimal?  @db.Decimal
  Balance       Decimal?  @db.Decimal
  ContextId     BigInt?
  ContextIdType String?
  Date          DateTime? @db.Timestamptz
  Description   String?
  FirstPartyId  Int?
  Id            BigInt    @id
  Reason        String?
  RefType       String?
  SecondPartyId Int?
  Tax           Decimal?  @db.Decimal
  TaxReceiverId Int?
}

model CharacterWalletTransactions {
  CharacterId   Int
  Character     Character @relation(fields: [CharacterId], references: [CharacterId])
  ClientId      Int?
  Date          DateTime? @db.Timestamptz
  IsBuy         Boolean?
  IsPersonal    Boolean?
  JournalRefId  BigInt?
  LocationId    BigInt?
  Quantity      Int?
  TransactionId BigInt    @id
  TypeId        Int?
  UnitPrice     Decimal?  @db.Decimal
}

model ContractsPublic {
  RegionId            Int?
  Buyout              Decimal?  @db.Decimal
  Collateral          Decimal?  @db.Decimal
  ContractId          Int       @id
  DateExpired         DateTime? @db.Timestamptz
  DateIssued          DateTime? @db.Timestamptz
  DaysToComplete      Int?
  EndLocationId       BigInt?
  ForCorporation      Boolean?
  IssuerCorporationId Int?
  IssuerId            Int?
  Price               Decimal?  @db.Decimal
  Reward              Decimal?  @db.Decimal
  StartLocationId     BigInt?
  Title               String?
  Type                String?
  Volume              Decimal?  @db.Decimal
}

model ContractsPublicBid {
  ContractId Int
  Amount     Float?
  BidId      Int
  DateBid    DateTime? @db.Timestamptz

  @@id([ContractId, BidId])
}

model ContractsPublicItems {
  ContractId         Int?
  IsBlueprintCopy    Boolean?
  IsIncluded         Boolean?
  ItemId             BigInt?
  MaterialEfficiency Int?
  Quantity           Int?
  RecordId           BigInt   @id
  Runs               Int?
  TimeEfficiency     Int?
  TypeId             Int?
}

model corporationMiningExtractions {
  ChunkArrivalTime    DateTime? @db.Timestamptz
  ExtractionStartTime DateTime? @db.Timestamptz
  MoonId              Int?
  NaturalDecayTime    DateTime? @db.Timestamptz
  StructureId         BigInt    @id
}

model corporationMiningObservers {
  ObserverId            BigInt
  CharacterId           Int
  LastUpDated           DateTime @db.Timestamptz
  Quantity              BigInt?
  RecordedCorporationId Int?
  TypeId                Int

  @@id([ObserverId, CharacterId, LastUpDated, TypeId])
}

model Corporation {
  CorporationId                        Int                                    @id
  AllianceId                           Int?
  Alliance                             Alliance?                              @relation(fields: [AllianceId], references: [AllianceId])
  CeoId                                Int?
  CreatorId                            Int?
  DateFounded                          DateTime?                              @db.Timestamptz
  Description                          String?
  FactionId                            Int?
  HomeStationId                        Int?
  MemberCount                          Int?
  Name                                 String?
  Shares                               BigInt?
  TaxRate                              Float?
  Ticker                               String?
  Url                                  String?
  WarEligible                          Boolean?
  Character                            Character[]
  CorporationAlliancehistory           CorporationAlliancehistory[]
  CharacterCorporationHistory          CharacterCorporationHistory[]
  CharacterLoyaltyPoints               CharacterLoyaltyPoints[]
  CharacterMedals                      CharacterMedals[]
  CorporationAssets                    CorporationAssets[]
  CorporationBlueprints                CorporationBlueprints[]
  CorporationBookmarks                 CorporationBookmarks[]
  CorporationBookmarksFolders          CorporationBookmarksFolders[]
  CorporationContact                   CorporationContact[]
  CorporationContactLabel              CorporationContactLabel[]
  CorporationContainersLogs            CorporationContainersLogs[]
  CorporationContracts                 CorporationContracts[]
  CorporationCustomsOffices            CorporationCustomsOffices[]
  CorporationDivisions                 CorporationDivisions[]
  CorporationFacilities                CorporationFacilities[]
  CorporationFwStats                   CorporationFwStats[]
  CorporationIcons                     CorporationIcons[]
  CorporationIndustryJobs              CorporationIndustryJobs[]
  CorporationMedals                    CorporationMedals[]
  CorporationMedalsIssued              CorporationMedalsIssued[]
  CorporationMembers                   CorporationMembers[]
  CorporationMembersLimit              CorporationMembersLimit[]
  CorporationMembersTitle              CorporationMembersTitle[]
  CorporationMembertracking            CorporationMembertracking[]
  CorporationNpccorps                  CorporationNpccorps[]
  CorporationOrder                     CorporationOrder[]
  CorporationOrderHistory              CorporationOrderHistory[]
  CorporationRoles                     CorporationRoles[]
  CorporationRolesHistory              CorporationRolesHistory[]
  CorporationShareholders              CorporationShareholders[]
  CorporationStandings                 CorporationStandings[]
  CorporationStarbases                 CorporationStarbases[]
  CorporationStructure                 CorporationStructure[]
  CorporationTitle                     CorporationTitle[]
  CorporationWallet                    CorporationWallet[]
  CorporationWalletDivisionJournal     CorporationWalletDivisionJournal[]
  CorporationWalletDivisionTransaction CorporationWalletDivisionTransaction[]
  LoyaltyStoreOffer                    LoyaltyStoreOffer[]
  SovereigntyMap                       SovereigntyMap[]
  Bloodline                            Bloodline[]
  Factions                             Factions[]
}

model CorporationAlliancehistory {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  AllianceId    Int?
  Alliance      Alliance?   @relation(fields: [AllianceId], references: [AllianceId])
  IsDeleted     Boolean?
  RecordId      Int
  StartDate     DateTime?   @db.Timestamptz

  @@id([CorporationId, RecordId])
}

model CorporationAssets {
  CorporationId   Int
  Corporation     Corporation @relation(fields: [CorporationId], references: [CorporationId])
  IsBlueprintCopy Boolean?
  IsSingleton     Boolean?
  ItemId          BigInt
  LocationFlag    String?
  LocationId      BigInt?
  LocationType    String?
  Quantity        Int?
  TypeId          Int?

  @@id([CorporationId, ItemId])
}

model CorporationBlueprints {
  CorporationId      Int
  Corporation        Corporation @relation(fields: [CorporationId], references: [CorporationId])
  ItemId             BigInt
  LocationFlag       String?
  LocationId         BigInt?
  MaterialEfficiency Int?
  Quantity           Int?
  Runs               Int?
  TimeEfficiency     Int?
  TypeId             Int?

  @@id([CorporationId, ItemId])
}

model CorporationBookmarks {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  BookmarkId    Int
  Coordinates   Json?
  Created       DateTime?   @db.Timestamptz
  CreatorId     Int?
  FolderId      Int?
  Item          Json?
  Label         String?
  LocationId    Int?
  Notes         String?

  @@id([CorporationId, BookmarkId])
}

model CorporationBookmarksFolders {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  CreatorId     Int?
  FolderId      Int
  Name          String?

  @@id([CorporationId, FolderId])
}

model CorporationContact {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  ContactId     Int
  ContactType   String?
  IsWatched     Boolean?
  LabelIds      Json?
  Standing      Float?

  @@id([CorporationId, ContactId])
}

model CorporationContactLabel {
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  LabelId       BigInt       @id
  LabelName     String?
}

model CorporationContainersLogs {
  CorporationId    Int?
  Corporation      Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  Action           String?
  CharacterId      Int?
  ContainerId      BigInt       @id
  ContainerTypeId  Int?
  LocationFlag     String?
  LocationId       BigInt?
  LoggedAt         DateTime?    @db.Timestamptz
  NewConfigBitmask Int?
  OldConfigBitmask Int?
  PasswordType     String?
  Quantity         Int?
  TypeId           Int?
}

model CorporationContracts {
  CorporationId             Int?
  Corporation               Corporation?                @relation(fields: [CorporationId], references: [CorporationId])
  AcceptorId                Int?
  AssigneeId                Int?
  Availability              String?
  Buyout                    Decimal?                    @db.Decimal
  Collateral                Decimal?                    @db.Decimal
  ContractId                Int                         @id
  DateAccepted              DateTime?                   @db.Timestamptz
  DateCompleted             DateTime?                   @db.Timestamptz
  DateExpired               DateTime?                   @db.Timestamptz
  DateIssued                DateTime?                   @db.Timestamptz
  DaysToComplete            Int?
  EndLocationId             BigInt?
  ForCorporation            Boolean?
  IssuerCorporationId       Int?
  IssuerId                  Int?
  Price                     Decimal?                    @db.Decimal
  Reward                    Decimal?                    @db.Decimal
  StartLocationId           BigInt?
  Status                    String?
  Title                     String?
  Type                      String?
  Volume                    Decimal?                    @db.Decimal
  CorporationContractsBid   CorporationContractsBid[]
  CorporationContractsItems CorporationContractsItems[]
}

model CorporationContractsBid {
  ContractId Int
  Contract   CorporationContracts @relation(fields: [ContractId], references: [ContractId])
  Amount     Float?
  BidId      Int?
  BidderId   Int                  @id
  DateBid    DateTime?            @db.Timestamptz
}

model CorporationContractsItems {
  ContractId  Int
  Contract    CorporationContracts @relation(fields: [ContractId], references: [ContractId])
  IsIncluded  Boolean?
  IsSingleton Boolean?
  Quantity    Int?
  RawQuantity Int?
  RecordId    BigInt               @id
  TypeId      Int?
}

model CorporationCustomsOffices {
  CorporationId            Int?
  Corporation              Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  AllianceTaxRate          Float?
  AllowAccessWithStandings Boolean?
  AllowAllianceAccess      Boolean?
  BadStandingTaxRate       Float?
  CorporationTaxRate       Float?
  ExcellentStandingTaxRate Float?
  GoodStandingTaxRate      Float?
  NeutralStandingTaxRate   Float?
  OfficeId                 BigInt       @id
  ReinforceExitEnd         Int?
  ReinforceExitStart       Int?
  StandingLevel            String?
  SystemId                 Int?
  TerribleStandingTaxRate  Float?
}

model CorporationDivisions {
  CorporationId Int          @id
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  Hangar        Json?
  Wallet        Json?
}

model CorporationFacilities {
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  FacilityId    BigInt       @id
  SystemId      Int?
  TypeId        Int?
}

model CorporationFwStats {
  CorporationId Int          @id
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  EnlistedOn    DateTime?    @db.Timestamptz
  FactionId     Int?
  Kills         Json?
  Pilots        Int?
  VictoryPoints Json?
}

model CorporationIcons {
  CorporationId Int         @id
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Px128x128     String?
  Px256x256     String?
  Px64x64       String?
}

model CorporationIndustryJobs {
  CorporationId        Int
  Corporation          Corporation @relation(fields: [CorporationId], references: [CorporationId])
  ActivityId           Int?
  BlueprintId          BigInt?
  BlueprintLocationId  BigInt?
  BlueprintTypeId      Int?
  CompletedCharacterId Int?
  CompletedDate        DateTime?   @db.Timestamptz
  Cost                 Decimal?    @db.Decimal
  Duration             Int?
  EndDate              DateTime?   @db.Timestamptz
  FacilityId           BigInt?
  InstallerId          Int?
  JoBid                Int         @id
  LicensedRuns         Int?
  LocationId           BigInt?
  OutputLocationId     BigInt?
  PauseDate            DateTime?   @db.Timestamptz
  Probability          Float?
  ProductTypeId        Int?
  Runs                 Int?
  StartDate            DateTime?   @db.Timestamptz
  Status               String?
  SuccessfulRuns       Int?
}

model CorporationMedals {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  CreatedAt     DateTime?   @db.Timestamptz
  CreatorId     Int?
  Description   String?
  MedalId       Int
  Title         String?

  @@id([CorporationId, MedalId])
}

model CorporationMedalsIssued {
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  CharacterId   Int
  IssuedAt      DateTime?    @db.Timestamptz
  IssuerId      Int?
  MedalId       Int
  Reason        String?
  Status        String?

  @@id([CharacterId, MedalId])
}

model CorporationMembers {
  CorporationId Int         @id
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Members       Json?
}

model CorporationMembersLimit {
  CorporationId Int         @id
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  MemberLimit   Int?
}

model CorporationMembersTitle {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  CharacterId   Int
  Title         Json?

  @@id([CharacterId, CorporationId])
}

model CorporationMembertracking {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  BaseId        Int?
  CharacterId   Int
  LocationId    BigInt?
  LogoffDate    DateTime?   @db.Timestamptz
  LogonDate     DateTime?   @db.Timestamptz
  ShipTypeId    Int?
  StartDate     DateTime    @db.Timestamptz

  @@id([CharacterId, StartDate])
}

model CorporationNpccorps {
  CorporationId Int         @id
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
}

model CorporationOrder {
  CorporationId  Int
  Corporation    Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Duration       Int?
  Escrow         Decimal?    @db.Decimal
  IsBuyOrder     Boolean?
  Issued         DateTime?   @db.Timestamptz
  IssuedBy       Int?
  LocationId     BigInt?
  MinVolume      Int?
  OrderId        BigInt      @id
  Price          Decimal?    @db.Decimal
  Range          String?
  RegionId       Int?
  TypeId         Int?
  VolumeRemain   Int?
  VolumeTotal    Int?
  WalletDivision Int?
}

model CorporationOrderHistory {
  CorporationId  Int
  Corporation    Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Duration       Int?
  Escrow         Decimal?    @db.Decimal
  IsBuyOrder     Boolean?
  Issued         DateTime?   @db.Timestamptz
  IssuedBy       Int?
  LocationId     BigInt?
  MinVolume      Int?
  OrderId        BigInt      @id
  Price          Decimal?    @db.Decimal
  Range          String?
  RegionId       Int?
  State          String?
  TypeId         Int?
  VolumeRemain   Int?
  VolumeTotal    Int?
  WalletDivision Int?
}

model CorporationRoles {
  CorporationId         Int
  Corporation           Corporation @relation(fields: [CorporationId], references: [CorporationId])
  CharacterId           Int         @id
  GrantableRoles        Json?
  GrantableRolesAtBase  Json?
  GrantableRolesAtHq    Json?
  GrantableRolesAtOther Json?
  Roles                 Json?
  RolesAtBase           Json?
  RolesAtHq             Json?
  RolesAtOther          Json?
}

model CorporationRolesHistory {
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  ChangedAt     DateTime     @db.Timestamptz
  CharacterId   Int
  IssuerId      Int?
  NewRoles      Json?
  OldRoles      Json?
  RoleType      String?

  @@id([CharacterId, ChangedAt])
}

model CorporationShareholders {
  CorporationId   Int
  Corporation     Corporation @relation(fields: [CorporationId], references: [CorporationId])
  ShareCount      BigInt?
  ShareholderId   Int
  ShareholderType String?

  @@id([ShareholderId, CorporationId])
}

model CorporationStandings {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  FromId        Int
  FromType      String?
  Standing      Float?

  @@id([CorporationId, FromId])
}

model CorporationStarbases {
  CorporationId                       Int?
  Corporation                         Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  StarbaseId                          BigInt       @id
  AllowAllianceMembers                Boolean?
  AllowCorporationMembers             Boolean?
  Anchor                              String?
  AttackIfAtWar                       Boolean?
  AttackIfOtherSecurityStatusDropping Boolean?
  AttackSecurityStatusThreshold       Float?
  AttackStandingThreshold             Float?
  FuelBayTake                         String?
  FuelBayView                         String?
  Fuels                               Json?
  Offline                             String?
  Online                              String?
  Unanchor                            String?
  UseAlliancetandings                 Boolean?
}

model CorporationStructure {
  CorporationId      Int?
  Corporation        Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  FuelExpires        DateTime?    @db.Timestamptz
  Name               String?
  NextReinforceApply DateTime?    @db.Timestamptz
  NextReinforceHour  Int?
  ProfileId          Int?
  ReinforceHour      Int?
  Services           Json?
  State              String?
  StateTimerEnd      DateTime?    @db.Timestamptz
  StateTimerStart    DateTime?    @db.Timestamptz
  StructureId        BigInt       @id
  SystemId           Int?
  TypeId             Int?
  UnanchorsAt        DateTime?    @db.Timestamptz
}

model CorporationTitle {
  CorporationId         Int
  Corporation           Corporation @relation(fields: [CorporationId], references: [CorporationId])
  GrantableRoles        Json?
  GrantableRolesAtBase  Json?
  GrantableRolesAtHq    Json?
  GrantableRolesAtOther Json?
  Name                  String?
  Roles                 Json?
  RolesAtBase           Json?
  RolesAtHq             Json?
  RolesAtOther          Json?
  TitleId               Int

  @@id([TitleId, CorporationId])
}

model CorporationWallet {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Balance       Decimal?    @db.Decimal
  Division      Int

  @@id([CorporationId, Division])
}

model CorporationWalletDivisionJournal {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Division      Int?
  Amount        Decimal?    @db.Decimal
  Balance       Decimal?    @db.Decimal
  ContextId     BigInt?
  ContextIdType String?
  Date          DateTime?   @db.Timestamptz
  Description   String?
  FirstPartyId  Int?
  Id            BigInt      @id
  Reason        String?
  RefType       String?
  SecondPartyId Int?
  Tax           Decimal?    @db.Decimal
  TaxReceiverId Int?
}

model CorporationWalletDivisionTransaction {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  Division      Int?
  ClientId      Int?
  Date          DateTime?   @db.Timestamptz
  IsBuy         Boolean?
  JournalRefId  BigInt?
  LocationId    BigInt?
  Quantity      Int?
  TransactionId BigInt      @id
  TypeId        Int?
  UnitPrice     Decimal?    @db.Decimal
}

model DogmaAttributes {
  AttributeId  Int      @id
  DefaultValue Float?
  Description  String?
  DisplayName  String?
  HighIsGood   Boolean?
  IconId       Int?
  Name         String?
  Published    Boolean?
  Stackable    Boolean?
  UnitId       Int?
}

model DogmaDynamicItems {
  ItemId          BigInt @id
  TypeId          Int?
  CreatedBy       Int?
  DogmaAttributes Json?
  DogmaEffects    Json?
  MutatorTypeId   Int?
  SourceTypeId    Int?
}

model DogmaEffects {
  EffectId                 Int      @id
  Description              String?
  DisallowAutoRepeat       Boolean?
  DischargeAttributeId     Int?
  DisplayName              String?
  DurationAttributeId      Int?
  EffectCategory           Int?
  ElectronicChance         Boolean?
  FalloffAttributeId       Int?
  IconId                   Int?
  IsAssistance             Boolean?
  IsOffensive              Boolean?
  IsWarpSafe               Boolean?
  Modifiers                Json?
  Name                     String?
  PostExpression           Int?
  PreExpression            Int?
  Published                Boolean?
  RangeAttributeId         Int?
  RangeChance              Boolean?
  TrackingSpeedAttributeId Int?
}

//
// model fwLeaderboards {
//   Id BigInt @id @default(autoincrement())
//   Timestamp DateTime? @db.Timestamptz
//   Kills          Json?
//   VictoryPoints Json?
// }
//
//
// model FWLeaderboardCharacter {
//   Id BigInt @id @default(autoincrement())
//   Timestamp DateTime? @db.Timestamptz
//   Kills          Json?
//   VictoryPoints Json?
// }
//
//
// model FWLeaderboardCorporation {
//   Id BigInt @id @default(autoincrement())
//   Timestamp DateTime? @db.Timestamptz
//   Kills          Json?
//   VictoryPoints Json?
// }
//
//
// model FWStat {
//   FactionId         Int?
//   Timestamp DateTime? @db.Timestamptz
//   Kills              Json?
//   Pilots             Int?
//   SystemControlled Int?
//   VictoryPoints     Json?
//
//   @@ignore
// }
//
//
// model FWSystem {
//   Contested                String?
//   OccupierFactionId      Int?
//   OwnerFactionId         Int?
//   SolarSystemId          Int?
//   VictoryPoints           Int?
//   VictoryPointsThreshold Int?
//
//   @@ignore
// }
//
//
// model FWWar {
//   AgainstId Int?
//   FactionId Int?
//
//   @@ignore
// }

model Incursion {
  ConstellationId      Int      @id
  FactionId            Int?
  HasBoss              Boolean?
  InfestedSolarSystem  Json?
  Influence            Float?
  StagingSolarSystemId Int?
  State                String?
  Type                 String?
}

model IndustryFacilities {
  FacilityId    BigInt @id
  OwnerId       Int?
  RegionId      Int?
  SolarSystemId Int?
  Tax           Float?
  TypeId        Int?
}

model IndustrySystem {
  CostIndices   Json?
  SolarSystemId Int   @id
}

model killmails {
  KillmailHash  String?
  KillmailId    Int       @id
  Attackers     Json?
  KillmailTime  DateTime? @db.Timestamptz
  MoonId        Int?
  SolarSystemId Int?
  Victim        Json?
  WarId         Int?
}

model LoyaltyStoreOffer {
  CorporationId Int
  Corporation   Corporation @relation(fields: [CorporationId], references: [CorporationId])
  AkCost        Int?
  IskCost       BigInt?
  LpCost        Int?
  OfferId       Int
  Quantity      Int?
  RequiredItems Json?
  TypeId        Int?

  @@id([CorporationId, OfferId])
}

model MarketGroupMarket {
  MarketGroupId Int     @id
  Description   String?
  Name          String?
  ParentGroupId Int?
  Types         Json?
}

model MarketHistory {
  TypeId     Int
  RegionId   Int
  Timestamp  DateTime  @db.Timestamptz
  Average    Decimal?  @db.Decimal
  Date       DateTime? @db.Timestamptz
  Highest    Decimal?  @db.Decimal
  Lowest     Decimal?  @db.Decimal
  OrderCount BigInt?
  Volume     BigInt?

  @@id([TypeId, RegionId, Timestamp])
}

model MarketOrder {
  RegionId     Int?
  Duration     Int?
  IsBuyOrder   Boolean?
  Issued       DateTime? @db.Timestamptz
  LocationId   BigInt?
  MinVolume    Int?
  OrderId      BigInt    @id
  Price        Decimal?  @db.Decimal
  Range        String?
  SystemId     Int?
  TypeId       Int?
  VolumeRemain Int?
  VolumeTotal  Int?
}

model MarketPrice {
  AdjustedPrice Decimal? @db.Decimal
  AveragePrice  Decimal? @db.Decimal
  TypeId        Int
  Timestamp     DateTime @db.Timestamptz

  @@id([TypeId, Timestamp])
}

model MarketStructure {
  StructureId  BigInt    @id
  Duration     Int?
  IsBuyOrder   Boolean?
  Issued       DateTime? @db.Timestamptz
  LocationId   BigInt?
  MinVolume    Int?
  OrderId      BigInt?
  Price        Decimal?  @db.Decimal
  Range        String?
  TypeId       Int?
  VolumeRemain Int?
  VolumeTotal  Int?
}

model OpportunityGroup {
  GroupId        Int     @id
  ConnectedGroup Json?
  Description    String?
  Name           String?
  Notification   String?
  RequiredTasks  Json?
}

model OpportunityTask {
  TaskId       Int     @id
  Description  String?
  Name         String?
  Notification String?
}

model SovereigntyCampaigns {
  AttackersScore  Float?
  CampaignId      Int       @id
  ConstellationId Int?
  DefenderId      Int?
  DefenderScore   Float?
  EventType       String?
  Participants    Json?
  SolarSystemId   Int?
  StartTime       DateTime? @db.Timestamptz
  StructureId     BigInt?
}

model SovereigntyMap {
  AllianceId    Int?
  Alliance      Alliance?    @relation(fields: [AllianceId], references: [AllianceId])
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  FactionId     Int?
  SystemId      Int          @id
}

model SovereigntyStructure {
  AllianceId                  Int?
  Alliance                    Alliance? @relation(fields: [AllianceId], references: [AllianceId])
  SolarSystemId               Int?
  StructureId                 BigInt    @id
  StructureTypeId             Int?
  VulnerabilityOccupancyLevel Float?
  VulnerableEndTime           DateTime? @db.Timestamptz
  VulnerableStartTime         DateTime? @db.Timestamptz
}

model Status {
  Timestamp     DateTime @id @db.Timestamptz
  Players       Int
  ServerVersion String
  StartTime     DateTime @db.Timestamptz
  Vip           Boolean? @default(false)
}

model Ancestry {
  BloodlineId      Int?
  Bloodline        Bloodline? @relation(fields: [BloodlineId], references: [BloodlineId])
  Description      String?
  IconId           Int?
  Id               Int        @id
  Name             String?
  ShortDescription String?
}

model AsteroIdBelt {
  AsteroIdBeltId Int     @id
  Name           String?
  Position       Json?
  SystemId       Int?
}

model Bloodline {
  BloodlineId   Int          @id
  Charisma      Int?
  CorporationId Int?
  Corporation   Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  Description   String?
  Intelligence  Int?
  Memory        Int?
  Name          String?
  Perception    Int?
  RaceId        Int?
  ShipTypeId    Int?
  Willpower     Int?
  Character     Character[]
  Ancestry      Ancestry[]
}

model Categories {
  CategoryId Int      @id
  Group      Json?
  Name       String?
  Published  Boolean?
}

model Constellation {
  ConstellationId Int     @id
  Name            String?
  Position        Json?
  RegionId        Int?
  System          Json?
}

model Factions {
  CorporationId        Int?
  Corporation          Corporation? @relation(fields: [CorporationId], references: [CorporationId])
  Description          String?
  FactionId            Int          @id
  IsUnique             Boolean?
  MilitiaCorporationId Int?
  Name                 String?
  SizeFactor           Float?
  SolarSystemId        Int?
  StationCount         Int?
  StationSystemCount   Int?
}

model Graphic {
  GraphicId     Int     @id
  CollisionFile String?
  GraphicFile   String?
  IconFolder    String?
  SofDna        String?
  SofFationName String?
  SofHullName   String?
  SofRaceName   String?
}

model Group {
  GroupId    Int      @id
  CategoryId Int?
  Name       String?
  Published  Boolean?
  Types      Json?
}

model Moon {
  MoonId   Int     @id
  Name     String?
  Position Json?
  SystemId Int?
}

model Planet {
  PlanetId Int     @id
  Name     String?
  Position Json?
  SystemId Int?
  TypeId   Int?
}

model Race {
  AllianceId  Int?
  Alliance    Alliance? @relation(fields: [AllianceId], references: [AllianceId])
  Description String?
  Name        String?
  RaceId      Int       @id
}

model Region {
  RegionId      Int     @id
  Constellation Json?
  Description   String?
  Name          String?
}

model Schematic {
  SchematicId   Int     @id
  CycleTime     Int?
  SchematicName String?
}

model Stargate {
  StargateId  Int     @id
  Destination Json?
  Name        String?
  Position    Json?
  SystemId    Int?
  TypeId      Int?
}

model Star {
  StarId        Int     @id
  Age           BigInt?
  Luminosity    Float?
  Name          String?
  Radius        BigInt?
  SolarSystemId Int?
  SpectralClass String?
  Temperature   Int?
  TypeId        Int?
}

model Stations {
  StationId                Int     @id
  MaxDockableShipVolume    Float?
  Name                     String?
  OfficeRentalCost         Float?
  Owner                    Int?
  Position                 Json?
  RaceId                   Int?
  ReprocessingEfficiency   Float?
  ReprocessingStationsTake Float?
  Services                 Json?
  SystemId                 Int?
  TypeId                   Int?
}

model Structure {
  StructureId   BigInt  @id
  Name          String?
  OwnerId       Int?
  Position      Json?
  SolarSystemId Int?
  TypeId        Int?
}

model SystemJump {
  ShipJumps Int?
  SystemId  Int
  Timestamp DateTime @db.Timestamptz

  @@id([SystemId, Timestamp])
}

model SystemKill {
  NpcKills  Int?
  PodKills  Int?
  ShipKills Int?
  SystemId  Int
  Timestamp DateTime @db.Timestamptz

  @@id([SystemId, Timestamp])
}

model System {
  SystemId        Int     @id
  ConstellationId Int?
  Name            String?
  Planet          Json?
  Position        Json?
  SecurityClass   String?
  SecurityStatus  Float?
  StarId          Int?
  Stargate        Json?
  Stations        Json?
}

model Types {
  TypeId          Int      @id
  Capacity        Float
  Description     String
  DogmaAttributes Json?
  DogmaEffects    Json?
  GraphicId       Int?
  GroupId         Int
  IconId          Int?
  MarketGroupId   Int?
  Mass            Float?
  Name            String
  PackagedVolume  Float?
  PortionSize     Int?
  Published       Boolean
  Radius          Float?
  Volume          Float?
}

model Wars {
  Aggressor   Json?
  Ally        Json?
  Declared    DateTime? @db.Timestamptz
  Defender    Json?
  Finished    DateTime? @db.Timestamptz
  Id          Int       @id
  Mutual      Boolean?
  OpenForAlly Boolean?
  Retracted   DateTime? @db.Timestamptz
  Started     DateTime? @db.Timestamptz
}
